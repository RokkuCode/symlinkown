diff -Naurp a/fs/Kconfig b/fs/Kconfig
--- a/fs/Kconfig	2023-03-11 13:55:44.000000000 +0100
+++ b/fs/Kconfig	2023-03-13 10:48:41.199563991 +0100
@@ -392,4 +392,30 @@ source "fs/unicode/Kconfig"
 config IO_WQ
 	bool
 
+config GRKERNSEC_SYMLINKOWN
+	bool "Kernel-enforced SymlinksIfOwnerMatch"
+	default y
+	help
+	  Apache's SymlinksIfOwnerMatch option has an inherent race condition
+	  that prevents it from being used as a security feature.  As Apache
+	  verifies the symlink by performing a stat() against the target of
+	  the symlink before it is followed, an attacker can setup a symlink
+	  to point to a same-owned file, then replace the symlink with one
+	  that targets another user's file just after Apache "validates" the
+	  symlink -- a classic TOCTOU race.  If you say Y here, a complete,
+	  race-free replacement for Apache's "SymlinksIfOwnerMatch" option
+	  will be in place for the group you specify. If the sysctl option
+	  is enabled, a sysctl option with name "grsec_symlinkown_enable"
+	  is created.
+
+config GRKERNSEC_SYMLINKOWN_GID
+	int "GID for users with kernel-enforced SymlinksIfOwnerMatch"
+	depends on GRKERNSEC_SYMLINKOWN
+	default 81
+	help
+	  Setting this GID determines what group kernel-enforced
+	  SymlinksIfOwnerMatch will be enabled for. If the sysctl option
+	  is enabled, a sysctl option with name "grsec_symlinkown_gid" is
+	  created.
+
 endmenu
diff -Naurp a/fs/namei.c b/fs/namei.c
--- a/fs/namei.c	2023-03-11 13:55:44.000000000 +0100
+++ b/fs/namei.c	2023-03-13 10:48:41.202563991 +0100
@@ -583,12 +583,50 @@ struct nameidata {
 	int		dfd;
 	kuid_t		dir_uid;
 	umode_t		dir_mode;
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	struct path	*symlinkown_stack;
+	struct path	symlinkown_internal[EMBEDDED_LEVELS];
+	unsigned	symlinkown_depth;
+	int		symlinkown_enabled;
+#endif
 } __randomize_layout;
 
 #define ND_ROOT_PRESET 1
 #define ND_ROOT_GRABBED 2
 #define ND_JUMPED 4
 
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+int grsec_symlinkown_enable __read_mostly = 1;
+kgid_t grsec_symlinkown_gid __read_mostly = KGIDT_INIT(CONFIG_GRKERNSEC_SYMLINKOWN_GID);
+static int gr_get_symlinkown_enabled(void)
+{
+	if (grsec_symlinkown_enable && gid_valid(grsec_symlinkown_gid)
+		&& in_group_p(grsec_symlinkown_gid))
+		return 1;
+	return 0;
+}
+
+static int gr_handle_symlink_owner(const struct path *link, const struct inode *target)
+{
+	const struct inode *link_inode = d_backing_inode(link->dentry);
+	if (target && !uid_eq(link_inode->i_uid, target->i_uid)) {
+		audit_log_path_denied(AUDIT_ANOM_LINK, "grsec_symlinkown_gid");
+		return 1;
+	}
+	return 0;
+}
+
+static int gr_handle_nameidata_symlinkowner(const struct nameidata *nd, const struct inode *target)
+{
+	int i;
+	for (i = 0; i < nd->symlinkown_depth; i++) {
+		if (gr_handle_symlink_owner(&nd->symlinkown_stack[i], target))
+			return -EACCES;
+	}
+	return 0;
+}
+#endif
+
 static void __set_nameidata(struct nameidata *p, int dfd, struct filename *name)
 {
 	struct nameidata *old = current->nameidata;
@@ -600,6 +638,10 @@ static void __set_nameidata(struct namei
 	p->path.dentry = NULL;
 	p->total_link_count = old ? old->total_link_count : 0;
 	p->saved = old;
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	p->symlinkown_stack = p->symlinkown_internal;
+	p->symlinkown_enabled = -1;
+#endif
 	current->nameidata = p;
 }
 
@@ -623,12 +665,39 @@ static void restore_nameidata(void)
 		old->total_link_count = now->total_link_count;
 	if (now->stack != now->internal)
 		kfree(now->stack);
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (now->symlinkown_stack != now->symlinkown_internal)
+		kfree(now->symlinkown_stack);
+#endif
 }
 
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+static int nd_alloc_symlinkown_stack(struct nameidata *nd)
+{
+	struct path *p;
+
+	if (likely(nd->symlinkown_depth != EMBEDDED_LEVELS))
+		return 0;
+	if (nd->symlinkown_stack != nd->symlinkown_internal)
+		return 0;
+
+	p = kmalloc(MAXSYMLINKS * sizeof(struct path), GFP_KERNEL);
+	if (unlikely(!p))
+		return -ENOMEM;
+	memcpy(p, nd->symlinkown_internal, sizeof(nd->symlinkown_internal));
+	nd->symlinkown_stack = p;
+	return 0;
+}
+#endif
+
 static bool nd_alloc_stack(struct nameidata *nd)
 {
 	struct saved *p;
 
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (nd->flags & LOOKUP_RCU)
+		return false;
+#endif
 	p= kmalloc_array(MAXSYMLINKS, sizeof(struct saved),
 			 nd->flags & LOOKUP_RCU ? GFP_ATOMIC : GFP_KERNEL);
 	if (unlikely(!p))
@@ -680,6 +749,12 @@ static void terminate_walk(struct nameid
 		path_put(&nd->path);
 		for (i = 0; i < nd->depth; i++)
 			path_put(&nd->stack[i].link);
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+		/* we'll only ever set our values in ref-walk mode */
+		for (i = 0; i < nd->symlinkown_depth; i++)
+			path_put(&nd->symlinkown_stack[i]);
+		nd->symlinkown_depth = 0;
+#endif
 		if (nd->state & ND_ROOT_GRABBED) {
 			path_put(&nd->root);
 			nd->state &= ~ND_ROOT_GRABBED;
@@ -1755,6 +1830,24 @@ static const char *pick_link(struct name
 			path_put(link);
 		return ERR_PTR(error);
 	}
+
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (unlikely(nd->symlinkown_enabled == -1))
+		nd->symlinkown_enabled = gr_get_symlinkown_enabled();
+	if (nd->symlinkown_enabled && !uid_eq(inode->i_uid, GLOBAL_ROOT_UID)) {
+		struct path *symlinkownlast;
+		error = nd_alloc_symlinkown_stack(nd);
+		if (unlikely(error)) {
+			path_put(link);
+			return ERR_PTR(error);
+		}
+		symlinkownlast = nd->symlinkown_stack + nd->symlinkown_depth++;
+		symlinkownlast->dentry = link->dentry;
+		symlinkownlast->mnt = link->mnt;
+		path_get(symlinkownlast);
+	}
+#endif
+
 	last = nd->stack + nd->depth++;
 	last->link = *link;
 	clear_delayed_call(&last->done);
@@ -2356,6 +2449,9 @@ static const char *path_init(struct name
 
 	nd->flags = flags;
 	nd->state |= ND_JUMPED;
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	nd->symlinkown_depth = 0;
+#endif
 
 	nd->m_seq = __read_seqcount_begin(&mount_lock.seqcount);
 	nd->r_seq = __read_seqcount_begin(&rename_lock.seqcount);
@@ -2521,6 +2617,10 @@ static int path_parentat(struct nameidat
 	int err = link_path_walk(s, nd);
 	if (!err)
 		err = complete_walk(nd);
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	if (!err && gr_handle_nameidata_symlinkowner(nd, nd->inode))
+		err = -EACCES;
+#endif
 	if (!err) {
 		*parent = nd->path;
 		nd->path.mnt = NULL;
@@ -3403,6 +3503,12 @@ static struct dentry *lookup_open(struct
 
 	/* Negative dentry, just create the file */
 	if (!dentry->d_inode && (open_flag & O_CREAT)) {
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+		if (gr_handle_nameidata_symlinkowner(nd, dir_inode)) {
+			error = -EACCES;
+			goto out_dput;
+		}
+#endif
 		file->f_mode |= FMODE_CREATED;
 		audit_inode_child(dir_inode, dentry, AUDIT_TYPE_CHILD_CREATE);
 		if (!dir_inode->i_op->create) {
@@ -3523,6 +3629,10 @@ static int do_open(struct nameidata *nd,
 		error = complete_walk(nd);
 		if (error)
 			return error;
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+		if (gr_handle_nameidata_symlinkowner(nd, nd->inode))
+			return -EACCES;
+#endif
 	}
 	if (!(file->f_mode & FMODE_CREATED))
 		audit_inode(nd->name, nd->path.dentry, 0);
diff -Naurp a/include/linux/fs.h b/include/linux/fs.h
--- a/include/linux/fs.h	2023-03-11 13:55:44.000000000 +0100
+++ b/include/linux/fs.h	2023-03-13 11:13:40.710318525 +0100
@@ -84,6 +84,11 @@ extern void __init files_maxfiles_init(v
 extern unsigned long get_max_files(void);
 extern unsigned int sysctl_nr_open;
 
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+extern int grsec_symlinkown_enable;
+extern kgid_t grsec_symlinkown_gid;
+#endif
+
 typedef __kernel_rwf_t rwf_t;
 
 struct buffer_head;
diff -Naurp a/kernel/sysctl.c b/kernel/sysctl.c
--- a/kernel/sysctl.c	2023-03-11 13:55:44.000000000 +0100
+++ b/kernel/sysctl.c	2023-03-13 11:07:38.836259349 +0100
@@ -1832,6 +1832,24 @@ static struct ctl_table kern_table[] = {
 		.extra1		= SYSCTL_ZERO,
 		.extra2		= SYSCTL_MAXOLDUID,
 	},
+#ifdef CONFIG_GRKERNSEC_SYMLINKOWN
+	{
+		.procname	= "grsec_symlinkown_enable",
+		.data		= &grsec_symlinkown_enable,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= proc_dointvec_minmax,
+		.extra1		= SYSCTL_ZERO,
+		.extra2		= SYSCTL_ONE,
+	},
+	{
+		.procname	= "grsec_symlinkown_gid",
+		.data		= &grsec_symlinkown_gid,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= proc_dointvec,
+	},
+#endif
 	{
 		.procname	= "overflowgid",
 		.data		= &overflowgid,
